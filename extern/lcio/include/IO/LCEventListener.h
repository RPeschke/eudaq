// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef IO_ILCFACTORY_H
#define IO_ILCFACTORY_H 1
#include "LCPlatform.hh"
namespace IO {

class LCReader;
class LCWriter;

/**Factory to create LCWriter and Reader object for the known data 
 * formats, e.g. SIO. The implementation (LCFactory) will be a singleton class 
 * that knows all concrete reader/writer implementations.
 * 
 * @author gaede
 * @version Mar 7, 2003
 */
class  DLLEXPORT_LCIO  ILCFactory {

public: 
    /// Destructor.
    virtual ~ILCFactory() { /* nop */; }

//     /** Returns the instance of the factory.
//      * In the future we need to specify the data format here...
//      * This doesn't work for java as an interface can't have static members ...
//      */
    // this needs more thought ....
//           
// @cpp{ static LCFactory* getInstance() ;  
// }
//      
/**Creates an LCWriter object for the current persistency type.
 */
    virtual LCWriter * createLCWriter() = 0;

/**Creates an LCReader object for the current persistency type.
 */
    virtual LCReader * createLCReader(int readerFlag = 0) = 0;
}; // class
} // namespace IO
#endif /* ifndef IO_ILCFACTORY_H */
// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef IO_LCEVENTLISTENER_H
#define IO_LCEVENTLISTENER_H 1

#include "LCPlatform.hh"
#include "EVENT/LCEvent.h"

namespace IO {

/** Listener for the occurence of LCEvents when reading a stream.
 * User classes should implement this interface for their analysis code 
 * and then register the listener with LCReader.
 * 
 * @author gaede 
 * @version Mar 11, 2003
 * @see LCEvent
 * @see LCReader
 */

  class  DLLEXPORT_LCIO LCEventListener {

public: 
    /// Destructor.
    virtual ~LCEventListener() { /* nop */; }

    /** Call back for analyzing an LCEvent. The access to the event is 'read only'.
     *  Adding new collections to the event is allowed wheras
     * 	existing data collections and elements can not be modified.  
     */
    virtual void processEvent(EVENT::LCEvent * evt) = 0;

    /** Call back for updating an LCEvent. Here all modifications are allowed.
     *  Only use this method if you need to remove a collection from the event or 
     *  you need to modify (fix) exisiting data.
     */
    virtual void modifyEvent(EVENT::LCEvent * evt) = 0;

//     /** Call back for analyzing an LCEvent.
//      * @deprecated - use processEvent().
//      */
//     public void analyze(const LCEvent* evt) ;
//     /** Call back for updating an LCEvent.
//      * @deprecated - use modifyEvent().
//      */
//     public void update( LCEvent* evt ) ;
}; // class
} // namespace IO
#endif /* ifndef IO_LCEVENTLISTENER_H */
